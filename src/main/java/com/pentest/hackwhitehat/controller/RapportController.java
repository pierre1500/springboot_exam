package com.pentest.hackwhitehat.controller;

import com.pentest.hackwhitehat.service.PentestService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.ModelAndView;

import java.util.ArrayList;
import java.util.List;

@Controller
public class RapportController {

    @Value("${kali.username}")
    private String kaliUsername;

    @Value("${kali.password}")
    private String kaliPassword;

    @Value("${kali.host}")
    private String kaliHost;

    @Value("${kali.port}")
    private int kaliPort;

    @Value("${kali.script.path}")
    private String kaliScriptPath;

    private PentestService pentestService;

    @Autowired
    public RapportController(PentestService pentestService) {
        this.pentestService = pentestService;
    }

    @RequestMapping(method = RequestMethod.POST, value = "/rapport")
    public ModelAndView home(@RequestParam("ip_adress") String ip) {
        ModelAndView modelAndView = new ModelAndView();

        // Liste des résultats des commandes
        List<String> results = new ArrayList<>();

        // Liste des scripts à exécuter
        List<String> scripts = new ArrayList<>();
        scripts.add("script1.sh");

        // Exécution des scripts et stockage des résultats
        for (String script : scripts) {
            String result = pentestService.executeCommand(kaliUsername, kaliPassword, kaliHost, ip, kaliPort, kaliScriptPath + script);
            results.add(result);
        }

        modelAndView.addObject("results", results);
        modelAndView.setViewName("rapport.html");
        return modelAndView;
    }
}
