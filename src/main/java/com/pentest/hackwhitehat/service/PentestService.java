package com.pentest.hackwhitehat.service;

import com.jcraft.jsch.*;
import org.springframework.stereotype.Service;

import java.io.IOException;
import java.io.InputStream;

@Service
public class PentestService {
    public String executeCommand(String username, String password, String host,String ip, int port, String scriptPath) {
        JSch jsch = new JSch();
        Session session = null;
        StringBuilder sb = new StringBuilder();

        // Variable qui contiendra le résultat de la commande
        String result = "";

        try {
            // initialisation de la session SSH
            session = jsch.getSession(username, host, port);
            session.setPassword(password);

            // Configuration de la connexion SSH
            java.util.Properties config = new java.util.Properties();
            config.put("StrictHostKeyChecking", "no");
            session.setConfig(config);

            // Connexion à la machine virtuelle Kali Linux
            session.connect();

            // Création du canal SSH
            Channel channel = session.openChannel("exec");

            // Exécution de la commande souhaitée sur la machine virtuelle Kali Linux
            String command = scriptPath + " " + ip;
            ((ChannelExec)channel).setCommand(command);
            channel.setInputStream(null);
            ((ChannelExec)channel).setErrStream(System.err);
            InputStream in=channel.getInputStream();
            channel.connect();

            // Récupération des résultats de la commande
            byte[] tmp=new byte[1024];
            while(true){
                while(in.available()>0){
                    int i=in.read(tmp, 0, 1024);
                    if(i<0)break;
                    System.out.print(new String(tmp, 0, i));
                    result += new String(tmp, 0, i);
                }
                if(channel.isClosed()){
                    if(in.available()>0) continue;
                    System.out.println("exit-status: "+channel.getExitStatus());
                    break;
                }
                try{Thread.sleep(1000);}catch(Exception ee){}
            }

            // Fermeture du canal SSH et de la connexion
            channel.disconnect();
            session.disconnect();

        } catch (JSchException | IOException e) {
            e.printStackTrace();
        }
        result = result.replaceAll("\\n", "<br>");
        return result;
    }

}
